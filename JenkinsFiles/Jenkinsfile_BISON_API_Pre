#!groovy

def createEmailSendingList() {
    if ("true" == "${send_emailtoAll}") {
        emailfinalList = emailmultipleList
    } else {
        emailfinalList = emailsingleList
    }
    echo "$emailfinalList"
}

def printTargetFolder() {
    sh 'ls -la target'
}

pipeline {
    agent {
        label 'maven'
    }
    parameters {
        string(name: 'Host', defaultValue: 'https://jenkins-core-payment-initiation-dev.appls.cap1.paas.gsnetcloud.corp/job/bison_testing/job/bison_API_Test_Pre/', description: 'Server & Job Details')
        string(name: 'name', defaultValue: 'API tests', description: 'Test name to find similar tests')
        string(name: 'testplan_id', defaultValue: 'BISON-241', description: 'enter latest sprint test plan ID')
        string(name: 'cucumber_tags', defaultValue: '--tags @preBisonApi', description: 'in-scope: --tags @bison --tags @api --tags ~@in-dev --tags ~@descoped --tags ~@manual --tags ~@pending')
        choice(name: 'environment', choices: ['pre', 'dev', 'pro'], description: 'Select backend environment')
        booleanParam(name: 'notify_rocket_chat', defaultValue: false, description: 'To send notification to Rocket Chat')
        string(name: 'rocket_chat_group', defaultValue: 'project-bison', description: 'Rocket chat group name')
        booleanParam(name: 'notify_taas', defaultValue: true, description: 'To send test reports to TaaS')
        booleanParam(name: 'update_jira_results', defaultValue: true, description: 'Update JIRA results using X-Ray')
        booleanParam(defaultValue: true, description: 'if unticked- it will send email/s to one pre-configured member only. Emails will not be sent to all recipients', name: 'send_emailtoAll')
    }

    environment {
        check_rerun = false
        emailsingleList = 'umesha.jayanna@santander.co.uk'
        emailmultipleList = 'umesha.jayanna@santander.co.uk;Vinit.Tyagi@santander.co.uk;shreyas.jayaraj@santander.co.uk;Thulasiram.Sangalapalli@santander.co.uk;prasanna.chandran@santander.co.uk;Akshay.Raghavendra3@santander.co.uk;' +
                'DLBISON@santander.co.uk;Sreelatha.Chalimamidi@santander.co.uk;Nabajyoti.Chetia@santander.co.uk;shailesh.rajjoshi@santander.co.uk;' +
                'Ascension.tercerogarcia@santander.co.uk'
        emailfinalList = 'umesha.jayanna@santander.co.uk;Vinit.Tyagi@santander.co.uk;shreyas.jayaraj@santander.co.uk;Thulasiram.Sangalapalli@santander.co.uk;prasanna.chandran@santander.co.uk;Akshay.Raghavendra3@santander.co.uk;' +
                'DLBISON@santander.co.uk;Sreelatha.Chalimamidi@santander.co.uk;Nabajyoti.Chetia@santander.co.uk;shailesh.rajjoshi@santander.co.uk;' +
                'Ascension.tercerogarcia@santander.co.uk;dhandapani.srinivasan@santander.co.uk;Karthika.KP@santander.co.uk'
    }

    stages {
        stage('API Acceptance Test') {
            steps {
                script {
                    try {
                        static_tags = "--tags @bisonApi --tags ~@in-dev --tags ~@descoped --tags ~@manual --tags ~@pending "
                        tags = static_tags + "${params.cucumber_tags}"
//                        example = "--tags @aa,@ss --tags @welcome --tags ~@androidOnly --tags ~@stub"

                        mvn_options = ""

                        mvn_options = mvn_options + " -Denvironment=" + "${params.environment}"

                        zip zipFile: 'features.zip', dir: "${WORKSPACE}/src/test/resources/features/Bison"
                        sh 'curl -k -H "Content-Type: multipart/form-data" -u c0262464:Bangalore@35 -F "file=@features.zip" https://uk-jira.almuk.santanderuk.corp/rest/raven/1.0/import/feature?projectKey=BISON'

//                        sh "jq \".fields.customfield_10533[0]=${testplan_id}\" src/test/resources/xray/bison/bison_testPlan_info.json"

                        sh 'mvn clean test -DargLine="-Xmx2G" -Djavax.net.ssl.trustStore=nexus.jks -Djavax.net.ssl.trustStorePassword=changeit -Dcucumber.options="' + tags + '" ' + mvn_options + ' -Dgrid.run=true'

                        JobStatus = "Passed"
                    }
                    catch (e) {
                        echo 'Exception captured: ' + e.toString()
                        JobStatus = "Failed"
                    }
                    finally {
                        cucumber classifications: [
                                [key: 'Project', value: 'BISON'],
                                [key: 'Name', value: '${name}'],
                                [key: 'Cucumber tags', value: '${cucumber_tags}'],
                                [key: 'Environment', value: '${environment}']
                        ],
                                fileIncludePattern: '**/cucumber-report-1.json',
                                trendsLimit: 10
                    }
                }
            }
        }

        stage('Updating Job Status') {
            steps {
                script {
                    if ("${JobStatus}".equalsIgnoreCase("Failed")) {
                        currentBuild.result = 'FAILURE'
                    }
                    if ("${JobStatus}".equalsIgnoreCase("Passed")) {
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }

        stage('Send Email to intended recipients') {
//            when {
//                expression {
//                    //echo "${check_rerun}"
//                    return (params.send_notification)
//                }
//
//            }

            steps {

                script {
                    try {
                        echo 'normal execution in second stage written like script'
                        String ReportLink = "/cucumber-html-reports/overview-features.html"
                        String jenkinsLink = "${Host}${BUILD_NUMBER}${ReportLink}"
                        echo "$jenkinsLink"
                        echo "${environment}"

                        String emailBody = "Job Name - ${JOB_NAME}         <br>\n" +
                                "Build Number - ${BUILD_NUMBER} <br>\n" +
                                "Test Executed on - ${environment} <br>\n " +
                                "To watch the detailed report, click on Jenkins Url - <br>\n" + "$jenkinsLink" + "<br> \n"

                        emailext(
                               // attachmentsPattern: '**/target/report.html',
                                body: emailBody,
                                subject: 'JOBNAME- ${JOB_NAME} BUILDNO- ${BUILD_NUMBER}',
                                to: "$emailfinalList"
//                                from: "jenkins@code-maven.com"
                        )
                    } catch (e) {

                        echo 'some issue in Send Email but Invoke Rerun successfull. Rerun will be executed unless stopped intentionally'

                    }
                }


            }

        }

    }
    post {
        success {
            script {
                if ("${params.notify_rocket_chat}" == 'true') {
                    EnvironmentV = "${params.environment}".toUpperCase()
                    rocketSend channel: "${params.rocket_chat_group}", message: "BISON API acceptance tests completed in ${EnvironmentV} :white_check_mark: - [detailed-report](${BUILD_URL}cucumber-html-reports/overview-features.html) :information_source:", emoji: ':gear:', rawMessage: true
                }
            }
        }
        failure {
            script {
                if ("${params.notify_rocket_chat}" == 'true') {
                    EnvironmentV = "${params.environment}".toUpperCase()
                    rocketSend channel: "${params.rocket_chat_group}", message: "BISON API acceptance tests failed in ${EnvironmentV} - :negative_squared_cross_mark: - [failure-report](${BUILD_URL}cucumber-html-reports/overview-failures.html) :information_source: ", emoji: ':gear:', rawMessage: true
                }
            }
        }
        always {
            script {
                if ("${params.notify_taas}" == 'true') {
                    try {
                        EnvironmentU = "${params.environment}".toUpperCase()
                        sh "java -jar target/kafkautil.jar kafka.loganalytics.santanderuk.corp:6667 PRO_TAAS_FUNC_LOG Connect ${EnvironmentU} Corporate Bison_API_1.0 Agile Finacle API ${BUILD_URL} Remote /target/cucumber/cucumber-report-1.json ${GIT_URL}"
                        // sh 'java -jar ${KAFKASERVER} ${KAFKATOPIC} ${PROJECTNAME} ${ENVIRONMENT} ${PLATFORM} ${RELEASE} ${SPRINTNAME} ${WORKAREA} ${PROGRAM} ${JENKINSBUILDURL} ${ORIGIN} ${REPORTPATH} ${GIT_URL}'
                    }
                    catch (e) {
                        echo 'Exception captured: ' + e.toString()
                    }
                }

                if ("${params.update_jira_results}" == 'true') {
                    try {
                        sh 'zip -r cucumber-report.zip target/cucumber'
                        sh 'curl -k -H "Content-Type: multipart/form-data" -u S7267436:Azf0yiA9uteG -F "file=@cucumber-report.zip" https://uk-jira.almuk.santanderuk.corp/rest/raven/1.0/import/execution/bundle'
                    }
                    catch (e) {
                        echo 'Exception captured: ' + e.toString()
                    }
                }
            }
        }
    }
}